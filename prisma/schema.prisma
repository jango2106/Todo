generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum FrequencyBase {
  NONE
  DAYS
  WEEKS
  MONTHS
  YEARS
}

// SSO Auth and User models
model Account {
  id                 String  @id @default(cuid())
  userId             String  @map("user_id")
  type               String
  provider           String
  providerAccountId  String  @map("provider_account_id")
  refresh_token      String?
  access_token       String?
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?
  session_state      String?
  oauth_token_secret String?
  oauth_token        String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique @map("session_token")
  userId       String   @map("user_id")
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model User {
  id            String     @id @default(cuid())
  name          String?
  email         String?    @unique
  emailVerified DateTime?  @map("email_verified")
  image         String?
  createdAt     DateTime   @default(now()) @map(name: "created_at")
  updatedAt     DateTime   @updatedAt @map(name: "updated_at")
  accounts      Account[]
  sessions      Session[]
  taskLists     TaskList[] @relation(map: "task_lists")

  @@map(name: "users")
}

// Other Models
model Task {
  id                String        @id @default(cuid())
  name              String
  nextScheduledDate DateTime      @default("2000-01-01T00:00:00Z") @map("next_scheduled_date")
  lastCompletedDate DateTime      @default("2000-01-01T00:00:00Z") @map("last_scheduled_date")
  // The base unit of time that a repeat should occur
  frequencyBase     FrequencyBase @map("frequency_base")
  // The number of frequencyBase units to wait until an even will occur again
  frequencyUnits    Int           @map("frequency_units")
  taskListId        String        @map("task_list_id")
  taskList          TaskList      @relation(fields: [taskListId], references: [id], onDelete: Cascade, map: "task_list")

  @@map("task")
}

model TaskList {
  id      String @id @default(cuid())
  name    String
  ownerId String @map("owner_id")
  owner   User   @relation(fields: [ownerId], references: [id], onDelete: Cascade)
  tasks   Task[]

  @@map("task_list")
}
